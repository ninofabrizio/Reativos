#include "sdl.ceu"

input void SDL_REDRAW; /* Redesenhar */
input void SDL_QUIT; /* Sair */
input _SDL_KeyboardEvent* SDL_KEYDOWN; /* Eventos do teclado */
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN; // Evento de click para reiniciar

var _SDL_Window&? window;
	finalize
		window = _SDL_CreateWindow("F R O G G E R",
					   _SDL_WINDOWPOS_UNDEFINED,
					   _SDL_WINDOWPOS_UNDEFINED,
					   640, 476, _SDL_WINDOW_SHOWN);
	with
		_SDL_DestroyWindow(&window);
	end

/* Assertiva de teste */
//_assert(window != null);

var _SDL_Renderer&? renderer;
	finalize
		renderer = _SDL_CreateRenderer(&window, -1, 0);
	with
		_SDL_DestroyRenderer(&renderer);
	end

/* Assertiva de teste */
//_assert(renderer != null);

_srand(_time(null)); /*Pra que serve?*/

// Classe de inimigos
class Enemy with
    	var _SDL_Rect r;
	var _SDL_Renderer& ren;
    	var int speed;
	event void collide;
do
	this.r.h = 60;
	this.r.w = 100;
	this.r.x = 0;

	par/or do
		var bool touched =
			par do
				var int dt;
				var float x = r.x;
				every dt in 1ms do
					var float v = dt*speed;
					x = x + v/1000;
            				r.x = x;
            				if r.x > 540 then
                				escape false;
            				end
        			end
			with
				await this.collide;
				escape true;
			end;
		if touched then
			await FOREVER;
		end
	with
		every SDL_REDRAW do
			_SDL_SetRenderDrawColor(&ren, 0x00,0x00,0x00,0x00);
			_SDL_RenderFillRect(&ren, &this.r);
		end
	end
end

// Retângulo controlado pelo jogador
var _SDL_Rect frog;
frog.x = 333;
frog.y = 429;
frog.w = 26;
frog.h = 26;

// Se sapo ainda está em jogo, ganhou ou perdeu
// 1 = vivo | 2 = ganhou | 3 = morreu
var int state = 1;

// Variável para auxiliar posição y dos inimigos
var int pos = 0;

pool Enemy[3] enemies;

// Execução principal
par/or do
	every SDL_REDRAW do // Desenha fundo e linhas
		// Cenário de fundo
		_SDL_SetRenderDrawColor(renderer, 0xFF,0xFF,0xFF,0x00);
    		_SDL_RenderFillRect(renderer, null);

		// Linhas de limite de área com inimigos
		_SDL_SetRenderDrawColor(renderer, 0x00,0x00,0x00,0x00);
		_SDL_RenderDrawLine(renderer, 0, 408, 640, 408);
		_SDL_RenderDrawLine(renderer, 0, 68, 640, 68);
	end
 // Posicionamento dos inimigos
with
	loop do
		//pool Enemy[3] enemies;
		par/or do
			every 1ms do
				spawn Enemy in enemies with
					this.ren = renderer;
					this.r.y = 344 - (68 * pos);
					this.speed = 100 + _rand()%100;

					if pos <= 2 then
						pos = pos + 1;
					else
						pos = 0;
					end
				end;
			end
		with
			every 5ms do
				loop (Enemy*)e1 in enemies do
					if _SDL_HasIntersection(&e1:r,&frog) then
						state = 3;
						emit e1:collide;
						loop (Enemy*)e2 in enemies do
							if e1 != e2 then
								emit e2:collide;
							end
						end
					end
				end
			end
		with
			var _SDL_MouseButtonEvent* but;
			but = await SDL_MOUSEBUTTONDOWN;
			if but then
				state = 1;
			end
		end
	end

// Movendo retângulo controlado por jogador
with
	loop do
		par/or do
			var _SDL_KeyboardEvent* key;
			every key in SDL_KEYDOWN do
				if key:keysym.sym == _SDLK_LEFT and state == 1 then
					if frog.x - 32 > 0 then
						frog.x = frog.x - 32;
					end
				else/if key:keysym.sym == _SDLK_RIGHT and state == 1 then
					if frog.x + 32 + frog.w < 640 then
						frog.x = frog.x + 32;
					end
				else/if key:keysym.sym == _SDLK_UP and state == 1 then
					if frog.y - 68 > 0 then
						frog.y = frog.y - 68;
					end
				else/if key:keysym.sym == _SDLK_DOWN and state == 1 then
					if frog.y + 68 + frog.h < 476 then
						frog.y = frog.y + 68;
					end
				end
			end
		with
			every 5ms do
				loop (Enemy*)e1 in enemies do
					if _SDL_HasIntersection(&e1:r, &frog) then
						state = 3;
						emit e1:collide;
						loop (Enemy*)e2 in enemies do
							if e1 != e2 then
								emit e2:collide;
							end
						end
					end
				end
			end
        	with
			var _SDL_MouseButtonEvent* but;
            		but = await SDL_MOUSEBUTTONDOWN;
			if but then
				state = 1;
			end
        	end
    	end

// Jogador ganhou
with
	if frog.y <= 68 then
		state = 2;
		var int size;
		loop (Enemy*)e1 in enemies do
			emit e1:collide;
		end
	end

// Desenhando
with
	every SDL_REDRAW do

		// Retângulos inimigos
		_SDL_SetRenderDrawColor(renderer, 0x00,0x00,0x00,0x00);
		var int size;
		loop (Enemy*)e1 in enemies do
			_SDL_RenderFillRect(renderer, &e1);
		end

		// Retângulo controlado por jogador
		if state == 1 then
			_SDL_SetRenderDrawColor(renderer, 0x00,0xFF,0x00,0x00);
		else/if state == 2 then
			_SDL_SetRenderDrawColor(renderer, 0x00,0x00,0xFF,0x00);
		else
			_SDL_SetRenderDrawColor(renderer, 0xFF,0x00,0x00,0x00);
		end

		_SDL_RenderFillRect(renderer, &frog);
	end

// Saindo do jogo
with
	await SDL_QUIT;
end

escape 0;