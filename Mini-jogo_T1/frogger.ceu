#include "sdl.ceu"

input void SDL_REDRAW; /* Redesenhar */
input void SDL_QUIT; /* Sair */
input _SDL_KeyboardEvent* SDL_KEYDOWN; /* Eventos do teclado */
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN; // Evento de click para reiniciar
input int SDL_DT;

// Janela
var _SDL_Window&? window;
	finalize
		window = _SDL_CreateWindow("F R O G G E R",
					   _SDL_WINDOWPOS_UNDEFINED,
					   _SDL_WINDOWPOS_UNDEFINED,
					   640, 476, _SDL_WINDOW_SHOWN);
	with
		_SDL_DestroyWindow(&window);
	end

// Renderer para desenho
var _SDL_Renderer&? renderer;
	finalize
		renderer = _SDL_CreateRenderer(&window, -1, 0);
	with
		_SDL_DestroyRenderer(&renderer);
	end

// Para tratar eventos do teclado
var _SDL_KeyboardEvent* key;

// Classe dos inimigos
class Enemy with
    	var _SDL_Rect r;
	var _SDL_Renderer& ren;
    	var int speed;
	event void collide;
do
	this.r.h = 60;
	this.r.w = 100;
	this.r.x = 0;

	par/or do
		var bool touched =
			par do
				var int dt;
				var float x = r.x;
				every dt in SDL_DT do
					var float v = dt*speed;
					x = x + v/1000;
            				r.x = x;
            				if r.x > 540 then
                				escape false;
            				end
        			end
			with
				await this.collide;
				escape true;
			end;
		if touched then
			await FOREVER;
		end
	with
		every SDL_REDRAW do
			_SDL_SetRenderDrawColor(&ren, 0x00,0x00,0x00,0x00);
			_SDL_RenderFillRect(&ren, &this.r);
		end
	end
end

// Classe do controlável
class Frog with
    	var _SDL_Rect rec;
	var _SDL_Renderer& ren;
	var int status; // 1 = vivo | 2 = ganhou | 3 = morreu
	event void collide;
do
	rec.x = 333;
	rec.y = 429;
	rec.w = 26;
	rec.h = 26;

	par/and do
		await this.collide;
		status = 3;
	with
		every SDL_REDRAW do
			if status == 1 then
				_SDL_SetRenderDrawColor(&ren, 0x00,0xFF,0x00,0x00);
			else/if status == 2 then
				_SDL_SetRenderDrawColor(&ren, 0x00,0x00,0xFF,0x00);
			else
				_SDL_SetRenderDrawColor(&ren, 0xFF,0x00,0x00,0x00);
			end

			_SDL_RenderFillRect(&ren, &this.rec);
		end
	end
end

// Execução principal
par/or do
	// Montando fundo e linhas
	every SDL_REDRAW do
		// Cenário de fundo
		_SDL_SetRenderDrawColor(&renderer, 0xFF,0xFF,0xFF,0x00);
    		_SDL_RenderFillRect(&renderer, null);

		// Linhas de limite de área com inimigos
		_SDL_SetRenderDrawColor(&renderer, 0x00,0x00,0x00,0x00);
		_SDL_RenderDrawLine(&renderer, 0, 408, 640, 408);
		_SDL_RenderDrawLine(&renderer, 0, 68, 640, 68);
	end
// Criação de inimigos, do controlável e seus movimentos, verificação de perda e ganho
// e tratando restart
with
	loop do
		pool Enemy[4] enemies;
				
		var Frog f with
			this.ren = renderer;
		end;

		par/or do

			f.status = 1;
		// Crio cada inimigo
			every SDL_DT do
				spawn Enemy in enemies with
					this.ren = renderer;
					this.r.y = 73 + _rand()%271;
					this.speed = 50 + _rand()%800;
				end;
				_SDL_RenderFillRect(&renderer, &this);
			end
		// Trato eventos do teclado
		with
			every key in SDL_KEYDOWN do
				if key:keysym.sym == _SDLK_LEFT and f.status == 1 then
					if f.rec.x - 32 > 0 then
						f.rec.x = f.rec.x - 32;
					end
				else/if key:keysym.sym == _SDLK_RIGHT and f.status == 1 then
					if f.rec.x + 32 + f.rec.w < 640 then
						f.rec.x = f.rec.x + 32;
					end
				else/if key:keysym.sym == _SDLK_UP and f.status == 1 then
					if f.rec.y - 68 > 0 then
						f.rec.y = f.rec.y - 68;
					end
				else/if key:keysym.sym == _SDLK_DOWN and f.status == 1 then
					if f.rec.y + 68 + f.rec.h < 476 then
						f.rec.y = f.rec.y + 68;
					end
				end
			end
			_SDL_RenderFillRect(&renderer, &f);
		// Verifico colisão
		with
			every SDL_DT do
				loop (Enemy*)e1 in enemies do
					if _SDL_HasIntersection(&e1:r,&f.rec) then //???
						emit f.collide;
						emit e1:collide;
						loop (Enemy*)e2 in enemies do
							if e2 != e1 then
								emit e2:collide;
							end
						end
					end
				end
			end
		// Verifico jogo ganho
		with
			every SDL_DT do
				if f.rec.y <= 68 then
					f.status = 2;
					loop (Enemy*)e in enemies do
						emit e:collide;
					end
				end
			end
		// Restart
		with
			await SDL_MOUSEBUTTONDOWN;
    		end
	end
// Desenhando
with
	every SDL_REDRAW do
		_SDL_RenderPresent(&renderer);
	end

// Saindo do jogo
with
	await SDL_QUIT;
end

escape 0;