#include "sdl.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

var int win_w;
var int win_h;
var _SDL_Window&? win;
    finalize
        win = _SDL_CreateWindow("PF parte 1", 0, 0, 300, 500, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&win);
    end

var _SDL_Renderer&? ren;
    finalize
        ren = _SDL_CreateRenderer(&win, -1, 0);
    with
        _SDL_DestroyRenderer(&ren);
    end

_srand(_time(null));

// Retângulo que desenho no mapa
var _SDL_Rect r1;
    r1.w = 100;
    r1.h = 100;
    r1.x = 0;
    r1.y = 0;

// Retângulo que "pisca"
var _SDL_Rect r2;
    r2.w = 100;
    r2.h = 100;
    r2.x = 100;
    r2.y = 375;

// Crio minha função que chama a que calcula todos os caminhos
native do
	#include "path.c"

	#define size 3
	#define NUM 1000
	#define pathlen (size*size)

	void all (int *vec) {

		int i, x = 0, y = 0, level = 0;

		int Path[pathlen]; // temporário, representa casas de cada caminho possível
		//int paths[NUM]; // vetor com todos os caminhos, cada par de casas deste vetor representa os índices do mapa

		for(i = 0; i < NUM; i++)
			vec[i] = -1;

		sendInfos(Path, vec, size, pathlen);
		search_path(x, y, level);
    	}
end

// Meu vetor contendo todas as paths possíveis no mapa
var int[1000] vec;

// Variável para o retângulo que "pisca"
var int color = 1;

par/or do
    await SDL_QUIT;

// Execução da função que calcula todos os paths possíveis
with
    loop do
//	async do
		_all(vec); // Mando vetor para ter todos os caminhos do mapa
//	end	

	loop i in 1000 do
		// Possuo valores válidos no vetor até encontrar um valor negativo
		if vec[i] == -1 then
			break;
		// Conto de 2 em 2 pois cada par representa uma casa do mapa
		else/if i%2 == 0 then
			var int j = i + 1;
               		await 10ms;
               		r1.x = vec[i] * 100;
			r1.y = vec[j] * 100;
		end
        end
    end

// Parte onde mudo a cor do retângulo que "pisca" para tentar executar paralelamente
with
    loop do
	await 1000ms;

	if color == 1 then
		color = 2;
	else
		color = 1;
	end
    end
with
    loop do
        await SDL_REDRAW;

        _SDL_SetRenderDrawColor(ren, 0xFF,0xFF,0xFF,0x00);
        _SDL_RenderFillRect(ren, null);

        _SDL_SetRenderDrawColor(ren, 0x00,0x00,0xFF,0x00);
        _SDL_RenderFillRect(ren, &r1);

	if color == 1 then
        	_SDL_SetRenderDrawColor(ren, 0xFF,0x00,0x00,0x00);
	else
		_SDL_SetRenderDrawColor(ren, 0x00,0xFF,0x00,0x00);
	end
        _SDL_RenderFillRect(ren, &r2);

        _SDL_RenderPresent(ren);
    end
end

escape 0;